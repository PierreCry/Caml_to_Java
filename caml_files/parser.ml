type token =
  | IDENTIFIER of (string)
  | BCONSTANT of (bool)
  | INTCONSTANT of (int)
  | FST
  | SND
  | ADD
  | SUB
  | MUL
  | DIV
  | MOD
  | EQ
  | GE
  | GT
  | LE
  | LT
  | NE
  | BLAND
  | BLOR
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | SEMICOLON
  | COLON
  | QMARK
  | IF
  | THEN
  | ELSE
  | WHILE
  | FOR
  | RETURN
  | AND
  | ARROW
  | FUN
  | IN
  | LET
  | REC
  | TYPE
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

open Miniml

let primop_of_token = function
  | ADD -> BinOp (BArith BAadd)
  | SUB -> BinOp (BArith BAsub)
  | MUL -> BinOp (BArith BAmul)
  | DIV -> BinOp (BArith BAdiv)
  | MOD -> BinOp (BArith BAmod)
  | EQ -> BinOp (BCompar BCeq)
  | GE -> BinOp (BCompar BCge)
  | GT -> BinOp (BCompar BCgt)
  | LE -> BinOp (BCompar BCle)
  | LT -> BinOp (BCompar BClt)
  | NE -> BinOp (BCompar BCne)
  | _ -> failwith "in primop_of_token: unknown token"

let binary_exp e1 oper e2 = App(PrimOp (primop_of_token oper), Pair(e1, e2))

# 66 "parser.ml"
let yytransl_const = [|
  260 (* FST *);
  261 (* SND *);
  262 (* ADD *);
  263 (* SUB *);
  264 (* MUL *);
  265 (* DIV *);
  266 (* MOD *);
  267 (* EQ *);
  268 (* GE *);
  269 (* GT *);
  270 (* LE *);
  271 (* LT *);
  272 (* NE *);
  273 (* BLAND *);
  274 (* BLOR *);
  275 (* LPAREN *);
  276 (* RPAREN *);
  277 (* LBRACE *);
  278 (* RBRACE *);
  279 (* COMMA *);
  280 (* SEMICOLON *);
  281 (* COLON *);
  282 (* QMARK *);
  283 (* IF *);
  284 (* THEN *);
  285 (* ELSE *);
  286 (* WHILE *);
  287 (* FOR *);
  288 (* RETURN *);
  289 (* AND *);
  290 (* ARROW *);
  291 (* FUN *);
  292 (* IN *);
  293 (* LET *);
  294 (* REC *);
  295 (* TYPE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* IDENTIFIER *);
  258 (* BCONSTANT *);
  259 (* INTCONSTANT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\005\000\005\000\003\000\003\000\006\000\006\000\
\006\000\006\000\008\000\008\000\009\000\009\000\009\000\009\000\
\009\000\010\000\010\000\007\000\004\000\004\000\004\000\004\000\
\013\000\012\000\012\000\014\000\014\000\014\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\016\000\016\000\017\000\
\017\000\011\000\011\000\000\000"

let yylen = "\002\000\
\001\000\004\000\000\000\002\000\000\000\002\000\001\000\003\000\
\003\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\001\000\002\000\001\000\001\000\006\000\004\000\005\000\
\003\000\001\000\003\000\001\000\003\000\003\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\003\000\001\000\
\003\000\001\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\044\000\001\000\000\000\006\000\013\000\
\014\000\015\000\011\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\016\000\000\000\020\000\021\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\002\000\008\000\009\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\000\000\000\000\000\000\043\000\000\000\025\000\
\024\000\027\000\022\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\028\000\034\000\018\000\019\000\020\000\
\021\000\022\000\023\000\055\000\056\000\024\000\025\000\026\000\
\027\000"

let yysindex = "\013\000\
\237\254\000\000\021\255\000\000\000\000\008\255\000\000\000\000\
\000\000\000\000\000\000\000\000\008\255\008\255\025\255\246\254\
\010\255\015\255\000\000\000\000\002\255\000\000\000\000\030\255\
\052\255\027\255\024\255\028\255\029\255\022\255\019\255\053\255\
\031\255\056\000\002\255\002\255\002\255\008\255\000\000\002\255\
\002\255\002\255\002\255\002\255\002\255\002\255\002\255\002\255\
\002\255\000\000\057\255\008\255\008\255\060\255\036\255\041\255\
\000\000\000\000\000\000\000\000\000\000\015\255\015\255\052\255\
\052\255\052\255\052\255\052\255\052\255\027\255\024\255\055\255\
\054\255\000\000\008\255\008\255\053\255\000\000\008\255\000\000\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\014\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\084\000\029\000\000\000\000\000\001\000\000\000\000\000\111\000\
\125\000\223\000\248\000\000\000\066\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\255\
\000\000\000\000\000\000\000\000\000\000\057\000\085\000\139\000\
\153\000\167\000\181\000\195\000\209\000\237\000\003\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\250\255\000\000\254\255\251\255\000\000\
\000\000\067\000\245\255\012\000\000\000\000\000\035\000\042\000\
\043\000"

let yytablesize = 551
let yytable = "\017\000\
\018\000\029\000\008\000\009\000\010\000\011\000\012\000\030\000\
\008\000\009\000\010\000\011\000\012\000\001\000\005\000\005\000\
\005\000\005\000\005\000\003\000\038\000\007\000\035\000\036\000\
\037\000\031\000\013\000\032\000\028\000\059\000\060\000\061\000\
\005\000\033\000\014\000\040\000\041\000\062\000\063\000\072\000\
\005\000\049\000\015\000\048\000\016\000\073\000\074\000\050\000\
\005\000\052\000\005\000\051\000\053\000\054\000\057\000\058\000\
\029\000\008\000\009\000\010\000\011\000\012\000\042\000\043\000\
\044\000\045\000\046\000\047\000\080\000\081\000\075\000\076\000\
\083\000\077\000\078\000\013\000\064\000\065\000\066\000\067\000\
\068\000\069\000\079\000\003\000\030\000\021\000\026\000\039\000\
\082\000\070\000\000\000\071\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\032\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\034\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\037\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\000\000\018\000\000\000\000\000\018\000\
\018\000\000\000\000\000\000\000\018\000\018\000\000\000\000\000\
\000\000\018\000\028\000\028\000\018\000\000\000\000\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\000\000\
\028\000\000\000\000\000\028\000\028\000\000\000\000\000\000\000\
\028\000\028\000\000\000\000\000\000\000\028\000\029\000\029\000\
\028\000\000\000\000\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\000\000\029\000\000\000\000\000\029\000\
\029\000\000\000\000\000\000\000\029\000\029\000\000\000\000\000\
\000\000\029\000\030\000\030\000\029\000\000\000\000\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\
\030\000\000\000\000\000\030\000\030\000\000\000\000\000\000\000\
\030\000\030\000\000\000\000\000\000\000\030\000\000\000\000\000\
\030\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\000\000\031\000\000\000\000\000\031\000\031\000\000\000\
\000\000\000\000\031\000\031\000\000\000\038\000\038\000\031\000\
\038\000\000\000\031\000\038\000\038\000\000\000\000\000\000\000\
\038\000\038\000\000\000\032\000\032\000\038\000\032\000\000\000\
\038\000\032\000\032\000\000\000\000\000\000\000\032\000\032\000\
\000\000\033\000\033\000\032\000\033\000\000\000\032\000\033\000\
\033\000\000\000\000\000\000\000\033\000\033\000\000\000\034\000\
\034\000\033\000\034\000\000\000\033\000\034\000\034\000\000\000\
\000\000\000\000\034\000\034\000\000\000\035\000\035\000\034\000\
\035\000\000\000\034\000\035\000\035\000\000\000\000\000\000\000\
\035\000\035\000\000\000\036\000\036\000\035\000\036\000\000\000\
\035\000\036\000\036\000\000\000\000\000\000\000\036\000\036\000\
\000\000\037\000\037\000\036\000\037\000\000\000\036\000\037\000\
\037\000\000\000\000\000\000\000\037\000\037\000\000\000\000\000\
\040\000\037\000\040\000\000\000\037\000\040\000\040\000\000\000\
\000\000\000\000\040\000\040\000\000\000\000\000\039\000\040\000\
\039\000\000\000\040\000\039\000\039\000\000\000\000\000\000\000\
\039\000\039\000\000\000\042\000\000\000\039\000\042\000\042\000\
\039\000\000\000\000\000\042\000\042\000\000\000\041\000\000\000\
\042\000\041\000\041\000\042\000\000\000\000\000\041\000\041\000\
\000\000\000\000\000\000\041\000\000\000\000\000\041\000"

let yycheck = "\006\000\
\000\000\013\000\001\001\002\001\003\001\004\001\005\001\014\000\
\001\001\002\001\003\001\004\001\005\001\001\000\001\001\002\001\
\003\001\004\001\005\001\039\001\019\001\001\001\008\001\009\001\
\010\001\001\001\019\001\038\001\000\000\035\000\036\000\037\000\
\019\001\024\001\027\001\006\001\007\001\040\000\041\000\051\000\
\027\001\018\001\035\001\017\001\037\001\052\000\053\000\020\001\
\035\001\028\001\037\001\023\001\034\001\001\001\024\001\000\000\
\000\000\001\001\002\001\003\001\004\001\005\001\011\001\012\001\
\013\001\014\001\015\001\016\001\075\000\076\000\011\001\036\001\
\079\000\033\001\020\001\019\001\042\000\043\000\044\000\045\000\
\046\000\047\000\029\001\000\000\000\000\020\001\036\001\021\000\
\077\000\048\000\255\255\049\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\255\255\255\255\023\001\
\024\001\255\255\255\255\255\255\028\001\029\001\255\255\255\255\
\255\255\033\001\006\001\007\001\036\001\255\255\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\255\255\255\255\023\001\024\001\255\255\255\255\255\255\
\028\001\029\001\255\255\255\255\255\255\033\001\006\001\007\001\
\036\001\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\255\255\255\255\023\001\
\024\001\255\255\255\255\255\255\028\001\029\001\255\255\255\255\
\255\255\033\001\006\001\007\001\036\001\255\255\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\255\255\255\255\023\001\024\001\255\255\255\255\255\255\
\028\001\029\001\255\255\255\255\255\255\033\001\255\255\255\255\
\036\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\255\255\255\255\023\001\024\001\255\255\
\255\255\255\255\028\001\029\001\255\255\017\001\018\001\033\001\
\020\001\255\255\036\001\023\001\024\001\255\255\255\255\255\255\
\028\001\029\001\255\255\017\001\018\001\033\001\020\001\255\255\
\036\001\023\001\024\001\255\255\255\255\255\255\028\001\029\001\
\255\255\017\001\018\001\033\001\020\001\255\255\036\001\023\001\
\024\001\255\255\255\255\255\255\028\001\029\001\255\255\017\001\
\018\001\033\001\020\001\255\255\036\001\023\001\024\001\255\255\
\255\255\255\255\028\001\029\001\255\255\017\001\018\001\033\001\
\020\001\255\255\036\001\023\001\024\001\255\255\255\255\255\255\
\028\001\029\001\255\255\017\001\018\001\033\001\020\001\255\255\
\036\001\023\001\024\001\255\255\255\255\255\255\028\001\029\001\
\255\255\017\001\018\001\033\001\020\001\255\255\036\001\023\001\
\024\001\255\255\255\255\255\255\028\001\029\001\255\255\255\255\
\018\001\033\001\020\001\255\255\036\001\023\001\024\001\255\255\
\255\255\255\255\028\001\029\001\255\255\255\255\018\001\033\001\
\020\001\255\255\036\001\023\001\024\001\255\255\255\255\255\255\
\028\001\029\001\255\255\020\001\255\255\033\001\023\001\024\001\
\036\001\255\255\255\255\028\001\029\001\255\255\020\001\255\255\
\033\001\023\001\024\001\036\001\255\255\255\255\028\001\029\001\
\255\255\255\255\255\255\033\001\255\255\255\255\036\001"

let yynames_const = "\
  FST\000\
  SND\000\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  MOD\000\
  EQ\000\
  GE\000\
  GT\000\
  LE\000\
  LT\000\
  NE\000\
  BLAND\000\
  BLOR\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  SEMICOLON\000\
  COLON\000\
  QMARK\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  FOR\000\
  RETURN\000\
  AND\000\
  ARROW\000\
  FUN\000\
  IN\000\
  LET\000\
  REC\000\
  TYPE\000\
  EOF\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  BCONSTANT\000\
  INTCONSTANT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 43 "parser.mly"
            ( _1 )
# 374 "parser.ml"
               : Miniml.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typedef) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'mlexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'end_marker_opt) in
    Obj.repr(
# 48 "parser.mly"
 (Prog (_1, _2) )
# 383 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
  ( )
# 389 "parser.ml"
               : 'end_marker_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
 ( )
# 395 "parser.ml"
               : 'end_marker_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
  ( None )
# 401 "parser.ml"
               : 'typedef))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 60 "parser.mly"
 ( Some (_2) )
# 408 "parser.ml"
               : 'typedef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_exp_list_as_mlexp) in
    Obj.repr(
# 65 "parser.mly"
    ( _1 )
# 415 "parser.ml"
               : 'mult_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'primary_exp_list_as_mlexp) in
    Obj.repr(
# 67 "parser.mly"
    ( binary_exp _1 MUL _3 )
# 423 "parser.ml"
               : 'mult_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'primary_exp_list_as_mlexp) in
    Obj.repr(
# 69 "parser.mly"
    ( binary_exp _1 DIV _3 )
# 431 "parser.ml"
               : 'mult_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'primary_exp_list_as_mlexp) in
    Obj.repr(
# 71 "parser.mly"
    ( binary_exp _1 MOD _3 )
# 439 "parser.ml"
               : 'mult_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
 ( Fst )
# 445 "parser.ml"
               : 'unary_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
 ( Snd )
# 451 "parser.ml"
               : 'unary_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "parser.mly"
    ( Var(_1) )
# 458 "parser.ml"
               : 'primary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 85 "parser.mly"
 ( Bool(_1) )
# 465 "parser.ml"
               : 'primary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 87 "parser.mly"
 ( Int(_1) )
# 472 "parser.ml"
               : 'primary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_op) in
    Obj.repr(
# 89 "parser.mly"
    ( PrimOp (UnOp(_1)) )
# 479 "parser.ml"
               : 'primary_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'mlexp) in
    Obj.repr(
# 91 "parser.mly"
    ( _2 )
# 486 "parser.ml"
               : 'primary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_exp) in
    Obj.repr(
# 96 "parser.mly"
 ( [_1] )
# 493 "parser.ml"
               : 'primary_exp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'primary_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'primary_exp_list) in
    Obj.repr(
# 98 "parser.mly"
    ( _1 :: _2 )
# 501 "parser.ml"
               : 'primary_exp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_exp_list) in
    Obj.repr(
# 103 "parser.mly"
    ( match _1 with
    | [e] -> e
    | e::r -> List.fold_left (fun x y -> App(x, y)) e r
    |  _ -> failwith "parser: empty list impossible"
    )
# 512 "parser.ml"
               : 'primary_exp_list_as_mlexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pair_exp) in
    Obj.repr(
# 112 "parser.mly"
    ( _1 )
# 519 "parser.ml"
               : 'mlexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'mlexp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'mlexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'mlexp) in
    Obj.repr(
# 114 "parser.mly"
    ( Cond(_2, _4, _6) )
# 528 "parser.ml"
               : 'mlexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'mlexp) in
    Obj.repr(
# 116 "parser.mly"
    ( Fn (_2, _4) )
# 536 "parser.ml"
               : 'mlexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'let_binding_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'mlexp) in
    Obj.repr(
# 118 "parser.mly"
    ( Fix (_3, _5) )
# 544 "parser.ml"
               : 'mlexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mlexp) in
    Obj.repr(
# 123 "parser.mly"
  ( (_1, _3) )
# 552 "parser.ml"
               : 'let_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_binding) in
    Obj.repr(
# 128 "parser.mly"
 ( [_1] )
# 559 "parser.ml"
               : 'let_binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'let_binding) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'let_binding_list) in
    Obj.repr(
# 130 "parser.mly"
    ( _1 :: _3 )
# 567 "parser.ml"
               : 'let_binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mult_exp) in
    Obj.repr(
# 138 "parser.mly"
 ( _1 )
# 574 "parser.ml"
               : 'add_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_exp) in
    Obj.repr(
# 140 "parser.mly"
    ( binary_exp _1 ADD _3 )
# 582 "parser.ml"
               : 'add_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_exp) in
    Obj.repr(
# 142 "parser.mly"
    ( binary_exp _1 SUB _3 )
# 590 "parser.ml"
               : 'add_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_exp) in
    Obj.repr(
# 148 "parser.mly"
 ( _1 )
# 597 "parser.ml"
               : 'comp_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comp_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'comp_exp) in
    Obj.repr(
# 150 "parser.mly"
 ( binary_exp _1 EQ _3 )
# 605 "parser.ml"
               : 'comp_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comp_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'comp_exp) in
    Obj.repr(
# 152 "parser.mly"
 ( binary_exp _1 GE _3 )
# 613 "parser.ml"
               : 'comp_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comp_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'comp_exp) in
    Obj.repr(
# 154 "parser.mly"
 ( binary_exp _1 GT _3 )
# 621 "parser.ml"
               : 'comp_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comp_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'comp_exp) in
    Obj.repr(
# 156 "parser.mly"
 ( binary_exp _1 LE _3 )
# 629 "parser.ml"
               : 'comp_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comp_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'comp_exp) in
    Obj.repr(
# 158 "parser.mly"
 ( binary_exp _1 LT _3 )
# 637 "parser.ml"
               : 'comp_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comp_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'comp_exp) in
    Obj.repr(
# 160 "parser.mly"
 ( binary_exp _1 NE _3 )
# 645 "parser.ml"
               : 'comp_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comp_exp) in
    Obj.repr(
# 166 "parser.mly"
 ( _1 )
# 652 "parser.ml"
               : 'and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_exp) in
    Obj.repr(
# 168 "parser.mly"
 ( Cond(_1, _3, Bool(false)) )
# 660 "parser.ml"
               : 'and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_exp) in
    Obj.repr(
# 174 "parser.mly"
 ( _1 )
# 667 "parser.ml"
               : 'or_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'or_exp) in
    Obj.repr(
# 176 "parser.mly"
 ( Cond(_1, Bool(true), _3) )
# 675 "parser.ml"
               : 'or_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_exp) in
    Obj.repr(
# 182 "parser.mly"
 ( _1 )
# 682 "parser.ml"
               : 'pair_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pair_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pair_exp) in
    Obj.repr(
# 184 "parser.mly"
 ( Pair(_2, _4) )
# 690 "parser.ml"
               : 'pair_exp))
(* Entry start *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let start (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Miniml.prog)
